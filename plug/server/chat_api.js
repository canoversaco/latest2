const path=require('path'), fs=require('fs'), Database=require('better-sqlite3'), crypto=require('crypto')
const DBp=()=>process.env.SQLITE_PATH||process.env.DATABASE_PATH||process.env.DB_FILE||path.join(process.cwd(),'data','plug.db')
function hasCol(db,t,c){try{return db.prepare(`PRAGMA table_info(${t})`).all().some(r=>r.name===c)}catch{return false}}
function init(){const p=DBp();fs.mkdirSync(path.dirname(p),{recursive:true});const db=new Database(p);db.pragma('journal_mode=WAL');db.exec(`
CREATE TABLE IF NOT EXISTS chat_messages(id INTEGER PRIMARY KEY AUTOINCREMENT,order_id INTEGER NOT NULL,sender TEXT NOT NULL,ciphertext TEXT NOT NULL,iv TEXT NOT NULL,created_at TEXT DEFAULT (datetime('now')),FOREIGN KEY(order_id) REFERENCES orders(id) ON DELETE CASCADE);`); if(!hasCol(db,'orders','chat_key')){try{db.exec(`ALTER TABLE orders ADD COLUMN chat_key TEXT;`)}catch{}} return db}
const streams=new Map();const send=(id,p)=>{const set=streams.get(id);if(!set)return;const line=`data: ${JSON.stringify(p)}\n\n`;for(const r of set){try{r.write(line)}catch{}}}
function attach(app){const db=init();const qO=db.prepare('SELECT * FROM orders WHERE id=?');const qM=db.prepare('SELECT id,order_id,sender,ciphertext,iv,created_at FROM chat_messages WHERE order_id=? ORDER BY id ASC');const ins=db.prepare('INSERT INTO chat_messages(order_id,sender,ciphertext,iv) VALUES (?,?,?,?)');const setK=db.prepare('UPDATE orders SET chat_key=@k WHERE id=@id')
  app.get('/api/orders/:id/chat/key',(req,res)=>{try{const id=+req.params.id;const user=String(req.query.user||'');const o=qO.get(id);if(!o)return res.status(404).json({error:'Bestellung nicht gefunden'});const ok=(user&&(user===o.user_username||user===o.courier_username||user==='admin'));if(!ok)return res.status(403).json({error:'Nicht berechtigt'});if(!o.chat_key){const k=crypto.randomBytes(32).toString('base64');setK.run({id,k});o.chat_key=k}res.json({key_base64:o.chat_key})}catch(e){res.status(500).json({error:'Fehler beim Key'})}})
  app.get('/api/orders/:id/chat',(req,res)=>{try{res.json({messages:qM.all(+req.params.id)})}catch(e){res.status(500).json({error:'Fehler beim Laden'})}})
  app.post('/api/orders/:id/chat',(req,res)=>{try{const id=+req.params.id;const {sender='',ciphertext='',iv=''}=req.body||{};if(!sender||!ciphertext||!iv)return res.status(400).json({error:'UngÃ¼ltige Nachricht'});ins.run(id,sender,ciphertext,iv);send(id,{type:'message',message:{order_id:id,sender,ciphertext,iv,created_at:new Date().toISOString()}});res.json({ok:true})}catch(e){res.status(500).json({error:'Senden fehlgeschlagen'})}})
  app.get('/api/orders/:id/chat/stream',(req,res)=>{const id=+req.params.id;res.writeHead(200,{'Content-Type':'text/event-stream','Cache-Control':'no-cache',Connection:'keep-alive','Access-Control-Allow-Origin':'*'});res.write('\n');let set=streams.get(id);if(!set){set=new Set();streams.set(id,set)};set.add(res);req.on('close',()=>{try{set.delete(res)}catch{}})})
  console.log('[chat_api] aktiv.')
}
module.exports={attach}
